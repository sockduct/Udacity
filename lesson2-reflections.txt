####################################################################################################
What happens when you initialize a repository?  Why do you need to do it?
> Initializing a repo creates a .git folder which stores change info.
> To take advantage of git/source control for a directory, you need to create a repo for the
> directory.

How is the staging area different from the working directory and the repository?  What value do
you think if offers?
> Staging area is a temporary buffer between the working directory and the repo.  The staging area
> collects related files in preparation for a commit.  The staging area makes it easy to group
> related files into a commit without forcing everything to be done with one command.

How can you use the staging area to make sure you have one commit per logical change?
> The staging area allows you to use git diff to see what's changed.  You can use git diff to
> see the difference between the working directory and the staging area and you can use git diff
> --staged to see what's different between the staging area and the most recent commit.  By
> reviewing what you're going to commit, you can make sure it's just one logical change.

What are some situations when branches would be helpful in keeping your history organized? How
would branches help?
> Whenever you want to make a major change or experiment with something, a branch would be a
> useful way to separate the change from the current working version.

How do the diagrams help you visualize the branch structure?
> Diagrams help crystalize how the commits are sequenced and how branches related to each other.

What is the result of merging two branches together? Why do we represent it in the diagram the way
we do?
> Merging two branches combines both together into a new commit with the checked out branch being
> the one used to label the commit.  This becomes the new tip for the checked out branch.  This
> commit is a little different than others though because it has two parents instead of one.  One
> good way to see this is with git log --graph --oneline

What are the pros and cons of Git's automatic merging vs. always doing merges manually?
> Where it's safe, automatic merging makes sense and saves time.  Where there's risk, manual
> merges make sense as multiple people may have to collaborate to determine the best course.

