####################################################################################################
When would you want to use a remote repository rather than keeping all your work local?
> Remote repos are useful for backing up your work.  If anything happens to your local files or
> to your computer, everything is safe on GitHub.  Remote repos are useful for keeping multiple
> devices in sync such as if you're using multiple systems.  They are also useful for
> collaborating with other people.

Why might you want to always pull changes manually rather than having Git automatically stay
up-to-date with your remote repository?
> Changes may be made by other people or even you from another system.  You may want to experiment
> with some features/ideas locally and not necessarily want the latest auto-merged in.

Describe the differences between forks, clones, and branches. When would you use one instead of
another?
> A fork is a GitHub specific action that copies a given repo to your account so you can make
> changes to it.  It also links back to the original author's repo.  This is useful where you
> don't have write permission to the original repo.  A clone is where you make a copy of a GitHub
> or local repo.  A branch is useful for creating a separate/distinct line of commits for a new
> or experimental features without impacting the main/master branch.  Thus a fork is a GitHub
> concept, a clone is a generic way to copy a repo, and a branch is a way to separate different
> lines/chains of commits.

What is the benefit of having a copy of the last known state of the remote stored locally?
> It allows you or multiple people to work with the branch/repo offline.  It allows experimenting
> with the repo locally without changing the master copy stored in the remote.  It facilitates
> collaboration by making it easier for one or more people to have the entire commit history
> locally.  Each person can then make changes and choose to push them back.

How would you collaborate without using Git or GitHub? What would be easier, and what would be
harder?
> Without git/GitHub you could use E-mail and/or something like DropBox.  However, this makes
> version control and coordinating between multiple collaborators painful.  Using something like
> DropBox may be easier for simple changes or minimal collaboration.  However, you lose version
> control history and this breaks down with more complex projects and lots of collaborators.

When would you want to make changes in a separate branch rather than directly in master? What
benefits does each approach have?
> When a solution/program is stable, any new features should typically be made in a new branch.
> However, bug fixes may make sense to put in master.  The benefit of using a new branch for
> new features is it makes it easy to see what got added in and to revert if necessary.

